from dotenv import load_dotenv

import os
import json
import datetime
import telebot
from dotenv import load_dotenv
from telebot import types

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)

SCHEDULE_PATH = "words_schedule.json"
PROGRESS_PATH = "storage/progress.csv"
REPETITION_PATH = "storage/repetition.json"
ESSAY_DIR = "storage/essays"

with open(SCHEDULE_PATH, encoding="utf-8") as f:
    schedule = json.load(f)

def get_today_words():
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    return schedule.get(today)

def check_word_usage(words, text):
    return [w["word"] for w in words if w["word"].lower() in text.lower()]

@bot.message_handler(commands=["start", "menu"])
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìò –°–ª–æ–≤–∞ –¥–Ω—è", "‚úçÔ∏è –ü—Ä–∏—Å–ª–∞—Ç—å —ç—Å—Å–µ")
    markup.add("üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø VocabularBot. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üìò –°–ª–æ–≤–∞ –¥–Ω—è")
def words_today(message):
    data = get_today_words()
    if not data:
        bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –Ω–µ—Ç.")
        return
    text = f"üéØ –¢–µ–º–∞: {data['theme']}\n\n"
    for w in data["words"]:
        text += f"üîπ *{w['word']}* ({w['pos']}) ‚Äî {w['translation']}\n_{w['example']}_\n\n"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "‚úçÔ∏è –ü—Ä–∏—Å–ª–∞—Ç—å —ç—Å—Å–µ")
def ask_essay(message):
    msg = bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —ç—Å—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    bot.register_next_step_handler(msg, handle_essay)

def handle_essay(message):
    user_id = str(message.from_user.id)
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    os.makedirs(ESSAY_DIR, exist_ok=True)
    path = f"{ESSAY_DIR}/{user_id}_{today}.txt"
    with open(path, "w", encoding="utf-8") as f:
        f.write(message.text)

    data = get_today_words()
    used = check_word_usage(data["words"], message.text)
    missed = [w["word"] for w in data["words"] if w["word"] not in used]

    try:
        with open(REPETITION_PATH, encoding="utf-8") as f:
            rep = json.load(f)
    except:
        rep = {}

    rep.setdefault(user_id, []).extend(missed)
    rep[user_id] = list(set(rep[user_id]))
    with open(REPETITION_PATH, "w", encoding="utf-8") as f:
        json.dump(rep, f, ensure_ascii=False, indent=2)

    with open(PROGRESS_PATH, "a", encoding="utf-8") as f:
        f.write(f"{user_id},{today},{len(data['words'])},{len(used)},yes\n")

    bot.send_message(message.chat.id, f"üìù –≠—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–æ.\n‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–æ–≤: {len(used)} –∏–∑ {len(data['words'])}")
    bot.send_message(message.chat.id, "üìä GPT-–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á—ë–Ω. –°–ø–∞—Å–∏–±–æ!")

@bot.message_handler(func=lambda m: m.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ")
def repeat_words(message):
    user_id = str(message.from_user.id)
    try:
        with open(REPETITION_PATH, encoding="utf-8") as f:
            rep = json.load(f)
        words = rep.get(user_id, [])
        if not words:
            raise ValueError
        text = "üîÅ –ü–æ–≤—Ç–æ—Ä–∏ —ç—Ç–∏ —Å–ª–æ–≤–∞:\n" + "\n".join(f"üîÅ {w}" for w in words)
        bot.send_message(message.chat.id, text)
    except:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")

@bot.message_handler(func=lambda m: m.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
def show_progress(message):
    user_id = str(message.from_user.id)
    try:
        with open(PROGRESS_PATH, encoding="utf-8") as f:
            lines = f.readlines()[1:]
            count = len([l for l in lines if user_id in l])
            bot.send_message(message.chat.id, f"üìà –≠—Å—Å–µ —Å–¥–∞–Ω–æ: {count}")
    except:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(func=lambda m: m.text == "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
def support(message):
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚ù§Ô∏è\nüì≤ Kaspi Gold: +7 777 772 21 70\n–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ!")

bot.polling()
