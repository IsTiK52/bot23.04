import telebot
import json
import datetime
import os
from telebot import types

BOT_TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –ü—É—Ç–∏
SCHEDULE_PATH = "words_schedule.json"
PROGRESS_PATH = "storage/progress.csv"
REPETITION_PATH = "storage/repetition.json"

# –°–ª–æ–≤–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
def get_today_words():
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    with open(SCHEDULE_PATH, encoding="utf-8") as f:
        schedule = json.load(f)
    return schedule.get(today)

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start", "menu"])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìò –°–ª–æ–≤–∞ –¥–Ω—è", "üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø VocabularBot. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda m: True)
def handle(message):
    if message.text == "üìò –°–ª–æ–≤–∞ –¥–Ω—è":
        data = get_today_words()
        if not data:
            bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –Ω–µ—Ç.")
            return
        theme = data["theme"]
        words = data["words"]
        text = f"üéØ –¢–µ–º–∞: {theme}\n\n"
        for w in words:
            text += f"üîπ *{w['word']}* ({w['pos']}) ‚Äî {w['translation']}\n_{w['example']}_\n\n"
        bot.send_message(message.chat.id, text, parse_mode="Markdown")

        # –ó–∞–ø–∏—Å—å –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å
        user_id = str(message.from_user.id)
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        with open(PROGRESS_PATH, "a", encoding="utf-8") as f:
            f.write(f"{user_id},{today}\n")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        with open(REPETITION_PATH, encoding="utf-8") as f:
            rep = json.load(f)
        rep.setdefault(user_id, []).extend([w["word"] for w in words])
        rep[user_id] = list(set(rep[user_id]))
        with open(REPETITION_PATH, "w", encoding="utf-8") as f:
            json.dump(rep, f, ensure_ascii=False, indent=2)

    elif message.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ":
        user_id = str(message.from_user.id)
        with open(REPETITION_PATH, encoding="utf-8") as f:
            rep = json.load(f)
        words = rep.get(user_id, [])
        if not words:
            bot.send_message(message.chat.id, "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        else:
            text = "üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:\n\n" + "\n".join(f"üîπ {w}" for w in words)
            bot.send_message(message.chat.id, text)

    elif message.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        user_id = str(message.from_user.id)
        try:
            with open(PROGRESS_PATH, encoding="utf-8") as f:
                lines = f.readlines()
            count = sum(1 for line in lines if user_id in line)
            bot.send_message(message.chat.id, f"üìà –ü—Ä–æ–π–¥–µ–Ω–æ –¥–Ω–µ–π: {count}")
        except FileNotFoundError:
            bot.send_message(message.chat.id, "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∫–∞ –ø—É—Å—Ç.")

    elif message.text == "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚ù§Ô∏è\nüì≤ Kaspi Gold: +7 777 772 21 70")

bot.polling()
